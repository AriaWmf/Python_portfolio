### wordcloud of each topic:

from wordcloud import WordCloud

# Generate a word cloud image for given topic
def draw_word_cloud(index):
  imp_words_topic=""
  comp=lda_model.components_[index]
  vocab_comp = zip(vocab, comp)
  sorted_words = sorted(vocab_comp, key= lambda x:x[1], reverse=True)[:500]
  for word in sorted_words:
    imp_words_topic=imp_words_topic+" "+word[0]

  wordcloud = WordCloud(width=300, height=200,background_color="white", max_words=5000, contour_width=3, contour_color='steelblue').generate(imp_words_topic)
  plt.figure(figsize=(5,5))
  plt.imshow(wordcloud)
  plt.axis("off")
  plt.tight_layout()
  plt.show()
  
  
  ###key words for each topic:
  vocab = vect.get_feature_names()
print("Topics found via LDA:")

for i, comp in enumerate(lda_model.components_):
    vocab_comp = zip(vocab, comp)
    sorted_words = sorted(vocab_comp, key= lambda x:x[1], reverse=True)[:10]
    print("Topic #"+str(i)+": ")
    for t in sorted_words:
        print(t[0],end=" ")
    print("\n")
  
  
  ### topics distribution across documents
  
  # column names
topicnames = ["Topic" + str(i) for i in range(lda_model.n_components)]

# index names
docnames = ["Doc" + str(i) for i in range(lda_top.shape[0])]

# Make the pandas dataframe
df_document_topic = pd.DataFrame(np.round(lda_top, 2), columns=topicnames, index=docnames)
# Get dominant topic for each document
dominant_topic = np.argmax(df_document_topic.values, axis=1)
df_document_topic['dominant_topic'] = dominant_topic

df_topic_distribution = df_document_topic['dominant_topic'].value_counts().reset_index()
df_topic_distribution.columns = ['Topic Num', 'Num Documents']
df_topic_distribution['Topic Num'] = 'Topic ' + df_topic_distribution['Topic Num'].map(str) 

df_topic_distribution = df_topic_distribution.set_index('Topic Num').sort_index()


ax = df_topic_distribution['Num Documents'].plot(kind='bar',rot=0,figsize = (10,5))
ax.set_xlabel('')
ax.set_ylabel('# documents')
ax.set_title('Topics Distribution across Documents')


### domain topic

# Styling
def color_green(val):
    color = 'green' if val > .1 else 'black'
    return 'color: {col}'.format(col=color)

def make_bold(val):
    weight = 700 if val > .1 else 400
    return 'font-weight: {weight}'.format(weight=weight)

# Apply Style
df_document_topics = df_document_topic.head(15).style.applymap(color_green).applymap(make_bold)
df_document_topics

###cloud
draw_word_cloud(1)


###
