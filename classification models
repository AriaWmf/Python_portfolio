# create training and testing vars
X_train, X_test, y_train, y_test = train_test_split(df, y, test_size=0.3,random_state=0)
X_train.shape

# fit a model
import statsmodels.api as sm
logit_model=sm.Logit(y_train,X_train)
result=logit_model.fit()
print(result.summary2())

lab_enc = preprocessing.LabelEncoder()
y_train = lab_enc.fit_transform(y_train)
print(score_training)
print(utils.multiclass.type_of_target(y_train))
print(utils.multiclass.type_of_target(y_train.astype('int')))
print(utils.multiclass.type_of_target(score_training))

###logistic regression:

logreg = LogisticRegression()
logreg.fit(X_train, y_train)
#Predicting the test set results and calculating the accuracy
y_pred = logreg.predict(X_test)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))


### Neural network model:
from numpy import exp,array, random, dot
import matplotlib.pyplot as plt 
import math 
import tensorflow as tf
import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split

#data
df = pd.read_csv('topic_stock.csv')
df = pd.DataFrame(df)
df.head()

# 1 hidden layer.   
# w1 , w2 
#set random seed
RANDOM_SEED = 0
tf.set_random_seed(RANDOM_SEED)

#A set of weights and biases between each layer, W and b
def init_weights(shape):
    tf.set_random_seed(RANDOM_SEED)
    weights = tf.random_normal(shape, stddev=0.1)
    return tf.Variable(weights)
    
#sigma function 
def forwardprop(X, w_1, w_2):
    h    = tf.nn.sigmoid(tf.matmul(X, w_1))  # The sigma function
    yhat = tf.matmul(h, w_2)  # The varphi function
    return yhat

def get_data():
#input data
    data   = df[['Topic0', 'Topic1', 'Topic2', 'Topic3', 'Topic4']].to_numpy()    
    target = df['0'].to_numpy()
#Prepend the column of 1s for bias
    N, M  = data.shape
    all_X = np.ones((N, M + 1))
    all_X[:, 1:] = data
#split data
    target = target.astype(int)
    num_labels = len(np.unique(target))
    all_Y = np.eye(num_labels)[target] 
    return train_test_split(all_X, all_Y, test_size=0.25, random_state=RANDOM_SEED)  
    
def main():
    train_X, test_X, train_y, test_y = get_data()
#Layer's sizes
    x_size = train_X.shape[1]   # Number of input nodes
    h_size = 250              # Number of hidden nodes
    y_size = train_y.shape[1]   # Number of outcomes 

# Symbols
    X = tf.placeholder("float", shape=[None, x_size])
    y = tf.placeholder("float", shape=[None, y_size])

# Weight initializations
    w_1 = init_weights((x_size, h_size))
    w_2 = init_weights((h_size, y_size))

# Forward propagation
    yhat    = forwardprop(X, w_1, w_2)
    predict = tf.argmax(yhat, axis=1)

# Feedward propagation
    cost    = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=yhat))
    updates = tf.train.GradientDescentOptimizer(0.01).minimize(cost)

# Run SGD
    sess = tf.Session()
    init = tf.global_variables_initializer()
    sess.run(init)

    for epoch in range(100):
# Training
        for i in range(len(train_X)):
            sess.run(updates, feed_dict={X: train_X[i: i + 1], y: train_y[i: i + 1]})
#accuracy
        train_accuracy = np.mean(np.argmax(train_y, axis=1) ==
                                 sess.run(predict, feed_dict={X: train_X, y: train_y}))
        test_accuracy  = np.mean(np.argmax(test_y, axis=1) ==
                                 sess.run(predict, feed_dict={X: test_X, y: test_y}))
#result
        print("Epoch = %d, train accuracy = %.2f%%, test accuracy = %.2f%%"
              % (epoch + 1, 100. * train_accuracy, 100. * test_accuracy))

    sess.close()
    
if __name__ == '__main__':
    main()
    



